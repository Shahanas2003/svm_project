# -*- coding: utf-8 -*-
"""svm1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17SvPYdIrhXdkH_RLyy8cY93J5AKJkoTn
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import classification_report, accuracy_score
import pandas as pd

# Load your data
data = pd.read_csv("emotions.csv")
X = data['text']
y = data['label']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize
vectorizer = TfidfVectorizer(stop_words='english', max_features=10000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Use only LinearSVC
model = LinearSVC(random_state=42, dual=False, max_iter=1000)
model.fit(X_train_tfidf, y_train)

# Evaluate
y_pred = model.predict(X_test_tfidf)
print("LinearSVC Performance:")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
print(classification_report(y_test, y_pred))

# Subset for Faster Execution
df_subset = data.sample(n=10000, random_state=42)
print("\nShape of the subset:", df_subset.shape)

# Remove duplicate rows
df_subset = df_subset.drop_duplicates()

# Remove rows with missing labels
df_subset = df_subset.dropna(subset=['label'])

# Convert text to lowercase
df_subset['text'] = df_subset['text'].str.lower()

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split # Import train_test_split

# Assuming df_subset is already created and preprocessed from previous steps
# Split the subset data into training and validation sets
X_subset = df_subset['text']
y_subset = df_subset['label']

# Split subset data into training and validation sets (e.g., 80% train, 20% validation)
X_train_small, X_val_small, y_train_small, y_val_small = train_test_split(X_subset, y_subset, test_size=0.2, random_state=42)

X_train_small_tfidf = vectorizer.transform(X_train_small)
X_val_small_tfidf = vectorizer.transform(X_val_small)

# Initialize SVM classifiers with different kernels

svm_poly = SVC(kernel='poly', max_iter=1000)
svm_rbf = SVC(kernel='rbf', max_iter=1000)
svm_sigmoid = SVC(kernel='sigmoid', max_iter=1000)

# Train the models using the vectorized small datasets

svm_poly.fit(X_train_small_tfidf, y_train_small)
svm_rbf.fit(X_train_small_tfidf, y_train_small)
svm_sigmoid.fit(X_train_small_tfidf, y_train_small)

# Evaluate the models using the vectorized validation set

y_pred_poly = svm_poly.predict(X_val_small_tfidf)
y_pred_rbf = svm_rbf.predict(X_val_small_tfidf)
y_pred_sigmoid = svm_sigmoid.predict(X_val_small_tfidf)

accuracy_poly = accuracy_score(y_val_small, y_pred_poly)
accuracy_rbf = accuracy_score(y_val_small, y_pred_rbf)
accuracy_sigmoid = accuracy_score(y_val_small, y_pred_sigmoid)


print(f"Accuracy (Polynomial): {accuracy_poly}")
print(f"Accuracy (RBF): {accuracy_rbf}")
print(f"Accuracy (Sigmoid): {accuracy_sigmoid}")